// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package validate

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"en": &dictionary{index: enIndex, data: enData},
		"zh": &dictionary{index: zhIndex, data: zhData},
	}
	fallback := language.MustParse("en")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"`%s` cound be malformed":        2,
	"`%s` has a maximum length [%d]": 5,
	"`%s` has a minimum length [%d]": 4,
	"`%s` is not a %s":               1,
	"`%s` not allow empty":           0,
	"`%s` should be greater than equal [%d], current value is [%d]": 7,
	"`%s` should be less than equal [%d], current value is [%d]":    8,
	"`%s` should be one of [%s], current value is [%d]":             6,
	"`%s` should be one of [%s], current value is [%s]":             3,
	"at least one of [%s] should be valued":                         9,
}

var enIndex = []uint32{ // 11 elements
	0x00000000, 0x00000018, 0x0000002f, 0x0000004a,
	0x00000085, 0x000000aa, 0x000000cf, 0x0000010a,
	0x00000151, 0x00000195, 0x000001be,
} // Size: 68 bytes

const enData string = "" + // Size: 446 bytes
	"\x02`%[1]s` not allow empty\x02`%[1]s` is not a %[2]s\x02`%[1]s` cound b" +
	"e malformed\x02`%[1]s` should be one of [%[2]s], current value is [%[3]s" +
	"]\x02`%[1]s` has a minimum length [%[2]d]\x02`%[1]s` has a maximum lengt" +
	"h [%[2]d]\x02`%[1]s` should be one of [%[2]s], current value is [%[3]d]" +
	"\x02`%[1]s` should be greater than equal [%[2]d], current value is [%[3]" +
	"d]\x02`%[1]s` should be less than equal [%[2]d], current value is [%[3]d" +
	"]\x02at least one of [%[1]s] should be valued"

var zhIndex = []uint32{ // 11 elements
	0x00000000, 0x00000017, 0x0000002c, 0x00000040,
	0x0000007c, 0x000000a9, 0x000000d5, 0x00000111,
	0x00000147, 0x0000017d, 0x000001ac,
} // Size: 68 bytes

const zhData string = "" + // Size: 428 bytes
	"\x02`%[1]s`不允许为空\x02`%[1]s`不是`%[2]s`\x02`%[1]s`格式错误\x02`%[1]s`不是[%[2]s]中" +
	"的任何一个, 当前值是[%[3]s]\x02`%[1]s`不满足最小长度[%[2]d]的约束\x02%[1]s`不满足最大长度[%[2]d]" +
	"的约束\x02`%[1]s`不是[%[2]s]中的任何一个, 当前值是[%[3]d]\x02`%[1]s`应该大于等于[%[2]d], 当前" +
	"值是[%[3]d]\x02`%[1]s`应该小于等于[%[2]d], 当前值是[%[3]d]\x02[%[1]s]这些变量中至少有一个被赋值"

	// Total table size 1010 bytes (0KiB); checksum: 7544E1E1
